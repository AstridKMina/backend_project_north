{
  "GET /api": {
    "description": "serves up a json representation of all the available endpoints of the api"
  },
  "GET /api/topics": {
    "description": "serves an array of all topics",
    "queries": [],
    "exampleResponse": {
      "topics": [
        {
          "slug": "football",
          "description": "Footie!"
        }
      ]
    }
  },
  "GET /api/articles": {
    "description": "Retrieves a list of articles. Allows filtering by topic and sorting by different criteria.",
    "query_parameters": {
      "sort_by": {
        "type": "string",
        "default": "created_at",
        "description": "The field used to sort the articles. Possible values: 'created_at', 'article_id', 'title', 'votes', 'author', 'comment_count'."
      },
      "order": {
        "type": "string",
        "default": "DESC",
        "description": "Sorting order. Possible values: 'ASC' or 'DESC'."
      },
      "topic": {
        "type": "string",
        "description": "Filters articles by a specific topic."
      }
    },
    "responses": {
      "200": {
        "description": "List of articles retrieved successfully.",
        "example": [
          {
            "article_id": 1,
            "title": "The World of JavaScript",
            "created_at": "2024-03-10T12:00:00.000Z",
            "votes": 100,
            "article_img_url": "https://example.com/image.jpg",
            "author": "john_doe",
            "topic": "programming",
            "comment_count": 5
          }
        ]
      },
      "400": {
        "description": "Bad request (invalid parameter).",
        "example": {
          "msg": "Invalid sort_by column"
        }
      },
      "404": {
        "description": "Topic not found.",
        "example": {
          "msg": "Topic not found"
        }
      }
    }
  },
  "GET/api/articles/:article_id": {
    "description": "Fetches a single article by its ID",
    "queries": [
      "author",
      "title",
      "article_id",
      "body",
      "topic",
      "created_at",
      "votes",
      "article_img_url"
    ],
    "exampleResponse": {
      "article": [
        {
          "author": "johndoe",
          "title": "The Future of AI",
          "article_id": 1,
          "body": "This is a fascinating article about AI.",
          "topic": "technology",
          "created_at": "2024-03-10T12:00:00Z",
          "votes": 42,
          "article_img_url": "https://example.com/image.jpg"
        }
      ]
    }
  },
  "GET /api/articles/:article_id/comments": {
    "description": "Fetches all comments associated with an article by its ID. The comments are ordered by `created_at` in descending order.",
    "params": {
      "article_id": {
        "type": "integer",
        "description": "The unique identifier for the article.",
        "required": true
      }
    },
    "responses": {
      "200": {
        "description": "Returns the list of comments for the specified article, ordered by `created_at` in descending order.",
        "body": [
          {
            "comment_id": "integer",
            "body": "string",
            "votes": "integer",
            "created_at": "string (ISO 8601 format)",
            "article_id": "integer",
            "author": "string"
          }
        ]
      }
    }
  },
  "POST /api/articles/:article_id/comments": {
    "description": "Adds a new comment to the specified article.",
    "requestBody": {
      "description": "An object containing the required fields to create a new comment.",
      "required": true,
      "content": {
        "application/json": {
          "example": {
            "username": "butter_bridge",
            "body": "This is a great article!"
          }
        }
      }
    },
    "responses": {
      "201": {
        "description": "Successfully added the comment.",
        "content": {
          "application/json": {
            "example": {
              "comment_id": 1,
              "article_id": 3,
              "body": "This is a great article!",
              "author": "butter_bridge",
              "created_at": "2025-03-11T12:00:00.000Z"
            }
          }
        }
      }
    }
  },
  "PATCH /api/articles/:article_id": {
    "description": "Updates the votes of an article based on the provided article ID.",
    "params": [
      {
        "name": "article_id",
        "type": "integer",
        "description": "The ID of the article to be updated."
      }
    ],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "example": {
            "inc_votes": 5
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "Returns the updated article with the new vote count.",
        "content": {
          "application/json": {
            "example": {
              "article_id": 1,
              "title": "An Interesting Article",
              "body": "This is the content of the article...",
              "votes": 105,
              "topic": "news",
              "author": "johndoe",
              "created_at": "2023-05-15T10:30:00.000Z"
            }
          }
        }
      }
    }
  },
  "DELETE /api/comments/:comment_id": {
    "description": "Deletes a comment by its comment_id",
    "parameters": {
      "comment_id": {
        "type": "integer",
        "description": "The unique identifier of the comment to be deleted",
        "required": true
      }
    },
    "responses": {
      "200": {
        "description": "Successfully deleted the comment",
        "body": {
          "msg": "Comment deletion was successful"
        }
      },
      "400": {
        "description": "Invalid comment_id provided",
        "body": {
          "msg": "Invalid comment_id"
        }
      },
      "404": {
        "description": "The comment with the specified comment_id was not found",
        "body": {
          "msg": "Comment not found"
        }
      }
    }
  },
  "GET /api/users": {
    "description": "Retrieves all users from the database",
    "parameters": {},
    "responses": {
      "200": {
        "description": "Successfully retrieved the list of users",
        "body": {
          "users": [
            {
              "name": {
                "type": "string",
                "description": "The name of the user"
              },
              "username": {
                "type": "string",
                "description": "The email of the user"
              },
              "avatar_url": {
                "type": "imagen",
                "description": "The imagen of the user"
              }
            }
          ]
        }
      },
      "404": {
        "description": "No users found in the database",
        "body": {
          "msg": "Users not found"
        }
      }
    }
  }
}