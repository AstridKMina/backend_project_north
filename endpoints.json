{
  "GET /api": {
    "description": "serves up a json representation of all the available endpoints of the api"
  },
  "GET /api/topics": {
    "description": "serves an array of all topics",
    "queries": [],
    "exampleResponse": {
      "topics": [
        {
          "slug": "football",
          "description": "Footie!"
        }
      ]
    }
  },
  "GET /api/articles": {
    "description": "serves an array of all articles",
    "queries": [
      "author",
      "topic",
      "sort_by",
      "order"
    ],
    "exampleResponse": {
      "articles": [
        {
          "title": "Seafood substitutions are increasing",
          "topic": "cooking",
          "author": "weegembump",
          "body": "Text from the article..",
          "created_at": "2018-05-30T15:59:13.341Z",
          "votes": 0,
          "comment_count": 6
        }
      ]
    }
  },
  "GET/api/articles/:article_id": {
    "description": "Fetches a single article by its ID",
    "queries": [
      "author",
      "title",
      "article_id",
      "body",
      "topic",
      "created_at",
      "votes",
      "article_img_url"
    ],
    "exampleResponse": {
      "article": [
        {
          "author": "johndoe",
          "title": "The Future of AI",
          "article_id": 1,
          "body": "This is a fascinating article about AI.",
          "topic": "technology",
          "created_at": "2024-03-10T12:00:00Z",
          "votes": 42,
          "article_img_url": "https://example.com/image.jpg"
        }
      ]
    }
  },
  "GET /api/articles?sort_by&order": {
    "description": "Obtiene una lista de artículos ordenados por un campo especificado, en un orden ascendente o descendente.",
    "queries": [
      {
        "name": "sort_by",
        "type": "string",
        "description": "El campo por el que ordenar los artículos.",
        " default": "created_at",
        "allowedValues": [
          "created_at",
          "article_id",
          "title",
          "votes",
          "article_img_url",
          "author",
          "topic",
          "comment_count"
        ]
      },
      {
        " name": "order",
        " type": "string",
        " description": "El orden en el que se deben ordenar los artículos.",
        "default": "ASC",
        " allowedValues": [
          "ASC",
          "DESC"
        ]
      }
    ],
    "exampleResponse": [
      {
        " article_id": 1,
        " title": "Article Title",
        "created_at": "2021-01-01T00:00:00.000Z",
        " votes": 100,
        " article_img_url": "https://example.com/article1.jpg",
        " author": "john_doe",
        " topic": "technology",
        " comment_count": 5
      }
    ]
  },
  "GET /api/articles/:article_id/comments": {
    "description": "Fetches a list of comments for a specific article identified by its article ID.",
    "queries": [
      {
        "allowedValues": [
          "created_at",
          "article_id",
          "comment_id",
          "votes",
          "body",
          "author"
        ]
      }
    ],
    "params": [
      {
        "name": "article_id",
        "type": "integer",
        "description": "The ID of the article for which to fetch the comments."
      }
    ],
    "exampleResponse": [
      {
        "comment_id": 1,
        "article_id": 1,
        "body": "This is a comment on the article.",
        "votes": 10,
        "created_at": "2021-01-01T00:00:00.000Z",
        "author": "john_doe"
      },
      {
        "comment_id": 2,
        "article_id": 1,
        "body": "This is another comment.",
        "votes": 5,
        "created_at": "2021-01-02T00:00:00.000Z",
        "author": "jane_doe"
      }
    ]
  },
  "POST /api/articles/:article_id/comments": {
    "description": "Adds a new comment to the specified article.",
    "requestBody": {
      "description": "An object containing the required fields to create a new comment.",
      "required": true,
      "content": {
        "application/json": {
          "example": {
            "username": "butter_bridge",
            "body": "This is a great article!"
          }
        }
      }
    },
    "responses": {
      "201": {
        "description": "Successfully added the comment.",
        "content": {
          "application/json": {
            "example": {
              "comment_id": 1,
              "article_id": 3,
              "body": "This is a great article!",
              "author": "butter_bridge",
              "created_at": "2025-03-11T12:00:00.000Z"
            }
          }
        }
      }
    }
  },
  "PATCH /api/articles/:article_id": {
    "description": "Updates the votes of an article based on the provided article ID.",
    "params": [
      {
        "name": "article_id",
        "type": "integer",
        "description": "The ID of the article to be updated."
      }
    ],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "example": {
            "inc_votes": 5
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "Returns the updated article with the new vote count.",
        "content": {
          "application/json": {
            "example": {
              "article_id": 1,
              "title": "An Interesting Article",
              "body": "This is the content of the article...",
              "votes": 105,
              "topic": "news",
              "author": "johndoe",
              "created_at": "2023-05-15T10:30:00.000Z"
            }
          }
        }
      }
    }
  },
  "DELETE /api/comments/:comment_id": {
    "description": "Deletes a comment by its comment_id",
    "parameters": {
      "comment_id": {
        "type": "integer",
        "description": "The unique identifier of the comment to be deleted",
        "required": true
      }
    },
    "responses": {
      "200": {
        "description": "Successfully deleted the comment",
        "body": {
          "msg": "Comment deletion was successful"
        }
      },
      "400": {
        "description": "Invalid comment_id provided",
        "body": {
          "msg": "Invalid comment_id"
        }
      },
      "404": {
        "description": "The comment with the specified comment_id was not found",
        "body": {
          "msg": "Comment not found"
        }
      }
    }
  }
}